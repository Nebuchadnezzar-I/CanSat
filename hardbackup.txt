===== ADS1115.go =====
package main

import (
	"fmt"
	"github.com/d2r2/go-i2c"
	"time"
)

type ADS1115 struct {
	i2c *i2c.I2C
}

func NewADS1115(bus int) (*ADS1115, error) {
	i2cMux, err := i2c.NewI2C(0x70, bus)
	if err != nil {
		return nil, err
	}
	defer i2cMux.Close()
	_, err = i2cMux.WriteBytes([]byte{0x04})
	if err != nil {
		return nil, fmt.Errorf("failed to select I2C channel for ADS1115: %v", err)
	}

	i2c, err := i2c.NewI2C(0x48, bus)
	if err != nil {
		return nil, err
	}
	return &ADS1115{i2c: i2c}, nil
}

func (adc *ADS1115) Close() {
	adc.i2c.Close()
}

func (adc *ADS1115) ReadVoltage() (float64, error) {
	config := []byte{0x84, 0x83}
	_, err := adc.i2c.WriteBytes([]byte{0x01, config[0], config[1]})
	if err != nil {
		return 0, fmt.Errorf("failed to configure ADS1115: %v", err)
	}

	time.Sleep(10 * time.Millisecond)

	data := make([]byte, 2)
	_, err = adc.i2c.ReadBytes(data)
	if err != nil {
		return 0, fmt.Errorf("failed to read ADC value: %v", err)
	}

	rawValue := int16(uint16(data[0])<<8 | uint16(data[1]))

	voltage := float64(rawValue) * (4.096 / 32768.0)

	if voltage < 0 {
		voltage = 0
	}

	return voltage, nil
}


===== BMP388.go =====
package main

import (
	"fmt"
	"github.com/d2r2/go-i2c"
	"time"
)

type BMP388 struct {
	i2c *i2c.I2C
}

func NewBMP388(bus int) (*BMP388, error) {
	i2cMux, err := i2c.NewI2C(0x70, bus)
	if err != nil {
		return nil, err
	}
	defer i2cMux.Close()
	_, err = i2cMux.WriteBytes([]byte{0x02})
	if err != nil {
		return nil, fmt.Errorf("failed to select I2C channel for BMP388: %v", err)
	}

	i2c, err := i2c.NewI2C(0x77, bus)
	if err != nil {
		return nil, err
	}
	return &BMP388{i2c: i2c}, nil
}

func (bmp *BMP388) Close() {
	bmp.i2c.Close()
}

func (bmp *BMP388) ReadPressure() (float64, error) {
	_, err := bmp.i2c.WriteBytes([]byte{0x1B, 0x13})
	if err != nil {
		return 0, fmt.Errorf("failed to configure BMP388: %v", err)
	}

	time.Sleep(10 * time.Millisecond)

	data := make([]byte, 3)
	for i := 0; i < 3; i++ {
		_, err = bmp.i2c.ReadBytes(data[i : i+1])
		if err != nil {
			return 0, fmt.Errorf("failed to read BMP388 pressure data: %v", err)
		}
	}

	rawPressure := (uint32(data[0]) << 16) | (uint32(data[1]) << 8) | uint32(data[2])
	rawPressure >>= 4 // BMP388 pressure data is 20-bit

	pressure := float64(rawPressure) * 1.25

	return pressure, nil
}

===== ChaCha20Poly1305.go =====
package main

import (
	"golang.org/x/crypto/chacha20poly1305"
)

func Encrypt(key, nonce, plaintext []byte) ([]byte, error) {
	aead, err := chacha20poly1305.NewX(key)
	if err != nil {
		return nil, err
	}

	ciphertext := aead.Seal(nil, nonce, plaintext, nil)
	return ciphertext, nil
}

func Decrypt(key, nonce, ciphertext []byte) ([]byte, error) {
	aead, err := chacha20poly1305.NewX(key)
	if err != nil {
		return nil, err
	}

	plaintext, err := aead.Open(nil, nonce, ciphertext, nil)
	if err != nil {
		return nil, err
	}

	return plaintext, nil
}

===== HWRNG.go =====
package main

import (
	"fmt"
	"os"
)

func readHWRNG(n int) ([]byte, error) {
	file, err := os.Open("/dev/hwrng")
	if err != nil {
		return nil, fmt.Errorf("failed to open hwrng: %w", err)
	}
	defer file.Close()

	randBytes := make([]byte, n)
	_, err = file.Read(randBytes)
	if err != nil {
		return nil, fmt.Errorf("failed to read from hwrng: %w", err)
	}
	return randBytes, nil
}


===== L76XGPS.go =====
package main

import (
	"os/exec"
	"strings"
)

type L76XGPS struct{}

func NewL76XGPS() *L76XGPS {
	return &L76XGPS{}
}

func (gps *L76XGPS) ReadGPS() (string, error) {
	cmd := exec.Command("timeout", "0.2", "cat", "/dev/serial0")
	output, err := cmd.Output()
	if err != nil {
		return "No GPS", nil
	}

	gpsData := strings.TrimSpace(string(output))
	if gpsData == "" {
		return "No GPS", nil
	}

	return gpsData, nil
}

===== main.go =====
package main

import (
	"fmt"
	"log"
	"time"

	"github.com/d2r2/go-logger"
	"golang.org/x/crypto/chacha20poly1305"
)

func clearScreen() {
	fmt.Print("\033[H\033[2J")
}

func main() {
	logger.ChangePackageLogLevel("i2c", logger.FatalLevel)

	for {
		startTime := time.Now()

		// SHT40
		sensor, err := NewSHT40(1)
		if err != nil {
			fmt.Println("Failed to initialize SHT40:", err)
			continue
		}
		defer sensor.Close()

		temp, hum, err := sensor.ReadSensorData()
		if err != nil {
			fmt.Println("Error reading sensor data:", err)
			continue
		}

		// ADS1115
		adc, err := NewADS1115(1)
		if err != nil {
			fmt.Println("Failed to initialize ADS1115:", err)
			continue
		}
		defer adc.Close()

		voltage, err := adc.ReadVoltage()
		if err != nil {
			fmt.Println("Error reading voltage:", err)
			continue
		}

		// BMP388 Sensor
		bmp388, err := NewBMP388(1)
		if err != nil {
			fmt.Println("Failed to initialize BMP388:", err)
			continue
		}
		defer bmp388.Close()

		pressure, err := bmp388.ReadPressure()
		if err != nil {
			fmt.Println("Error reading pressure:", err)
			continue
		}

		// L76XGPS
		gps := NewL76XGPS()
		gpsData, err := gps.ReadGPS()
		if err != nil {
			fmt.Println("Error reading GPS data:", err)
			continue
		}

		message := fmt.Sprintf(
			"Temperature: %.2fÂ°C\nHumidity: %.2f%%RH\nVoltage: %.3fV\nPressure: %.2f Pa\nGPS Data: %s\n",
			temp, hum, voltage, pressure, gpsData,
		)

		// Encryption
		key := make([]byte, chacha20poly1305.KeySize)
		nonce := make([]byte, chacha20poly1305.NonceSizeX)

		key, err = readHWRNG(chacha20poly1305.KeySize) // Key from hwrng
		if err != nil {
			log.Fatal("Failed to read key from hwrng:", err)
		}

		nonce, err = readHWRNG(chacha20poly1305.NonceSizeX) // Nonce from hwrng
		if err != nil {
			log.Fatal("Failed to read nonce from hwrng:", err)
		}

		messageBytes := []byte(message)

		// Encrypt
		ciphertext, err := Encrypt(key, nonce, messageBytes)
		if err != nil {
			log.Fatal("Encryption failed:", err)
		}

		// Decrypt
		plaintext, err := Decrypt(key, nonce, ciphertext)
		if err != nil {
			log.Fatal("Decryption failed:", err)
		}

		duration := time.Since(startTime)

		clearScreen()
		fmt.Println("Encrypted Message:\n", string(ciphertext))
		fmt.Println("Decrypted Message:\n" + string(plaintext))
		fmt.Printf("\nCycle completed in: %v\n", duration)

		time.Sleep(2 * time.Second)
	}
}

===== SHT40.go =====
package main

import (
	"fmt"
	"github.com/d2r2/go-i2c"
	"time"
)

type SHT40 struct {
	i2c *i2c.I2C
}

func NewSHT40(bus int) (*SHT40, error) {
	i2cMux, err := i2c.NewI2C(0x70, bus)
	if err != nil {
		return nil, err
	}
	defer i2cMux.Close()
	_, err = i2cMux.WriteBytes([]byte{0x01})
	if err != nil {
		return nil, fmt.Errorf("failed to select I2C channel for SHT40: %v", err)
	}

	i2c, err := i2c.NewI2C(0x44, bus)
	if err != nil {
		return nil, err
	}
	return &SHT40{i2c: i2c}, nil
}

func (s *SHT40) ReadSensorData() (float64, float64, error) {
	_, err := s.i2c.WriteBytes([]byte{0xFD})
	if err != nil {
		return 0, 0, fmt.Errorf("failed to send measurement command: %v", err)
	}

	time.Sleep(10 * time.Millisecond)

	data := make([]byte, 6)
	_, err = s.i2c.ReadBytes(data)
	if err != nil {
		return 0, 0, fmt.Errorf("failed to read data: %v", err)
	}

	if !checkCRC(data[:3]) || !checkCRC(data[3:]) {
		return 0, 0, fmt.Errorf("CRC check failed")
	}

	rawTemperature := uint16(data[0])<<8 | uint16(data[1])
	rawHumidity := uint16(data[3])<<8 | uint16(data[4])

	temperature := -45.0 + 175.0*(float64(rawTemperature)/65535.0)
	humidity := 100.0 * (float64(rawHumidity) / 65535.0)

	return temperature, humidity, nil
}

func (s *SHT40) Close() {
	s.i2c.Close()
}

func checkCRC(data []byte) bool {
	polynomial := byte(0x31)
	crc := byte(0xFF)
	for _, b := range data[:2] {
		crc ^= b
		for i := 0; i < 8; i++ {
			if crc&0x80 != 0 {
				crc = (crc << 1) ^ polynomial
			} else {
				crc <<= 1
			}
		}
	}
	return crc == data[2]
}
